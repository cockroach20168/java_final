    public void wirteRecord(int round){
        try {
            File writeName = new File("record.txt"); // 相对路径，如果没有则要建立一个新的output.txt文件
            //writeName.createNewFile(); // 创建新文件,有同名的文件的话直接覆盖
            FileWriter writer = new FileWriter(writeName);
            BufferedWriter out = new BufferedWriter(writer);
            try {
                for(int i = 0; i < moveRecordList.size(); i++)
                    out.write(round +","+ moveRecordList.get(i).being.getname()+",("
                            +moveRecordList.get(i).newPosx+","+moveRecordList.get(i).newPoxy+"),("
                            +moveRecordList.get(i).oldPosx+","+moveRecordList.get(i).newPoxy+")\r\n");
                out.flush(); // 把缓存区内容压入文件
            }catch (Exception e){

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void playAnimation(){
        printFieldCMD();
        try{
            animationStart.acquire();
        }catch (Exception e){
            e.printStackTrace();
        }
        final Timeline timeline = new Timeline();
        final Timeline timelineAttack = new Timeline();
        for(int i = 0; i < moveRecordList.size(); i++) {
            int newx = moveRecordList.get(i).newPosx;
            int newy = moveRecordList.get(i).newPoxy;
            int oldx = moveRecordList.get(i).oldPosx;
            int oldy = moveRecordList.get(i).oldPosy;
            timeline.getKeyFrames().add(new KeyFrame(Duration.millis(1000),
                    new KeyValue(moveRecordList.get(i).being.getImageView().xProperty(), oldx * 75),
                    new KeyValue(moveRecordList.get(i).being.getImageView().yProperty(), oldy * 75),
                    new KeyValue(moveRecordList.get(i).being.getImageView().translateXProperty(), (newx - oldx) * 75),
                    new KeyValue(moveRecordList.get(i).being.getImageView().translateYProperty(), (newy - oldy) * 75),
                    new KeyValue(moveRecordList.get(i).being.getBloodBar().xProperty(), oldx * 75),
                    new KeyValue(moveRecordList.get(i).being.getBloodBar().yProperty(), oldy * 75),
                    new KeyValue(moveRecordList.get(i).being.getBloodBar().translateXProperty(), (newx - oldx) * 75),
                    new KeyValue(moveRecordList.get(i).being.getBloodBar().translateYProperty(), (newy - oldy) * 75)));
        }
        for(int i = 0; i < attackRecordList.size(); i++){
            final int index = i;
            timelineAttack.getKeyFrames().add(new KeyFrame(Duration.millis(2000), new EventHandler<ActionEvent>() {
                public void handle(ActionEvent event) {
                    final Creature victim = attackRecordList.get(index).victim;
                    Creature criminal = attackRecordList.get(index).crimimal;
                    //final ColorAdjust colorAdjust = new ColorAdjust();
                    //colorAdjust.setBrightness(-0.5);
                    //victim.getImageView().setEffect(colorAdjust);
                    final Shape magicBall = new Circle(criminal.getPositionx()*75+37, criminal.getPositiony()*75+37, 15 / 2);
                    magicBall.setFill(Color.rgb((int) (Math.random() * 255), (int) (Math.random() * 255), (int) (Math.random() * 255)));
                    controller.getBorderPane().getChildren().add(magicBall);
                    SequentialTransition sequentialTransition = new SequentialTransition();
                    /*
                    TranslateTransition magicBalltranslateTransition = new TranslateTransition(Duration.millis(500), magicBall);
                    magicBalltranslateTransition.setFromX(0);
                    magicBalltranslateTransition.setToX((victim.getPositionx()-criminal.getPositionx())*75);
                    magicBalltranslateTransition.setFromY(0);
                    magicBalltranslateTransition.setToY((victim.getPositiony()-criminal.getPositiony())*75);
                    magicBalltranslateTransition.setCycleCount(1);
                    magicBalltranslateTransition.setAutoReverse(false);

                    ScaleTransition magicBallscaleTransition = new ScaleTransition(Duration.millis(500), magicBall);
                    magicBallscaleTransition.setFromX(1);
                    magicBallscaleTransition.setToX(3);
                    magicBallscaleTransition.setFromY(1);
                    magicBallscaleTransition.setToY(3);
                    magicBallscaleTransition.setCycleCount(1);
                    magicBallscaleTransition.setAutoReverse(false);

                    RotateTransition victimRotateTransition = new RotateTransition(Duration.millis(500), victim.getImageView());
                    victimRotateTransition.setAxis(new Point3D(0, 0, 1));
                    victimRotateTransition.setByAngle(180);
                    victimRotateTransition.setCycleCount(1);
                    victimRotateTransition.setAutoReverse(false);

                    Transition victimColorAdjustTransition = new Transition() {
                        {
                            setCycleDuration(Duration.millis(10));
                        }
                        @Override
                        protected void interpolate(double frac) {
                            if(frac != 0)   // frac是当前帧，这边一开始就直接亮度减半
                                victim.getImageView().setEffect(colorAdjust);
                        }
                    };

                    sequentialTransition.getChildren().add(magicBallscaleTransition);
                    sequentialTransition.getChildren().add(magicBalltranslateTransition);
                    sequentialTransition.getChildren().add(victimRotateTransition);
                    sequentialTransition.getChildren().add(victimColorAdjustTransition);
                    */
                    sequentialTransition.getChildren().add(criminal.getMagicBallscaleTransition(magicBall));
                    sequentialTransition.getChildren().add(criminal.getMagicBalltranslateTransition(magicBall, victim));
                    sequentialTransition.getChildren().add(victim.getVictimBloodAdjustTransition());
                    if(victim.getIsDead()) {
                        sequentialTransition.getChildren().add(victim.getVictimRotateTransition());
                        sequentialTransition.getChildren().add(victim.getVictimColorAdjustTransition());
                    }
                    sequentialTransition.setOnFinished(new EventHandler<ActionEvent>() {
                        public void handle(ActionEvent arg0) {
                            controller.getBorderPane().getChildren().remove(magicBall);
                        }
                    });
                    sequentialTransition.play();
                }
            }));
        }
        timeline.setOnFinished(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent event) {
                timelineAttack.play();
            }
        });
        timeline.setCycleCount(1);
        timeline.setAutoReverse(false);
        timelineAttack.setOnFinished(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent event) {
                attackRecordList.clear();
                moveRecordList.clear();
                animationEnd.release();
            }
        });
        timelineAttack.setCycleCount(1);
        timelineAttack.setAutoReverse(false);
        Platform.runLater(new Runnable() {
            public void run() {
                timeline.play();
            }
        });
    }

    public void attack(final Creature creature){
        synchronized (this){
            System.out.println(creature.getname()+"turn");

            if(!creature.getIsDead()){
                int x = creature.getPositionx();
                int y = creature.getPositiony();
                //System.out.println(creature.getname()+"not dead");
                try{
                    for(int i = 0; i < creatureList.length; i++) {
                        //System.out.println(creature.getname() + "在遍历creaturelist:" + i + "," + creatureList.length);
                        if (!creatureList[i].getIsDead() && creature != creatureList[i]
                                && ((creatureList[i] instanceof JustParty && creature instanceof EvilParty) || (creatureList[i] instanceof EvilParty && creature instanceof JustParty))
                                && abs(creatureList[i].getPositionx() - x) <= 2
                                && abs(creatureList[i].getPositiony() - y) <= 2) {
                            /*
                            Random myrandom = new Random();
                            //System.out.println(ra.nextInt(10)+1);}
                            int rand = myrandom.nextInt(10) + 1;
                            //System.out.println("random get");
                            if (rand % 2 == 0) {
                                System.out.println(creature);
                                System.out.println(creatureList[i]);
                                System.out.print(creature.getname()+" killed "+creatureList[i].getname()+'\n');
                                creatureList[i].setIsDead(true);
                                kill(creature, creatureList[i]);
                                break;
                            } else {
                                System.out.println(creatureList[i]);
                                System.out.println(creature);
                                System.out.print(creatureList[i].getname()+" killed "+creature.getname()+'\n');
                                creature.setIsDead(true);
                                kill(creatureList[i], creature);
                                break;
                            }*/
                            if(creature.getAttackStrength() < creatureList[i].getBlood()){
                                creatureList[i].setBlood(creatureList[i].getBlood()-creature.getAttackStrength());
                                hurt(creature, creatureList[i], creature.getAttackStrength());
                            }
                            else{
                                creatureList[i].setIsDead(true);
                                creatureList[i].setBlood(0);
                                hurt(creature, creatureList[i], creature.getAttackStrength());
                            }
                            break;
                        }
                    }
                }catch (Exception e){
                    e.printStackTrace();
                }
                //System.out.println(creature.getname()+"attack release");
                creature.getMySemaphore().animationEndRelease();

            }
            else{
                System.out.println(creature.getname()+" sorry, I'm dead");
                creature.getMySemaphore().animationEndRelease();
            }
        }
        //creature.getMySemaphore().animationEndRelease();
        if(isFinished()){

        }
    }